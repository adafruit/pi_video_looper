# video_looper.ini
# Main configuration file for video_looper.
# The video_looper works right out of the box by playing any video files that
# are in the root directory of an attached USB drive.
# In this file you can change a lot of the video_looper's behavior, like what
# video player is used or where it looks for media files.  
# Lines that begin with # are comments that will be ignored.
# Uncomment (=activate) a line by removing its preceding # character.
# Use ./reload.sh to restart the video_looper with any changed settings.

# Video_looper configuration block follows.
[video_looper]

# Set which video player will be used to play media files.  Can be either omxplayer,
# hello_video or image_player. omxplayer can play common formats like avi, mov, mp4, etc. and
# with full audio and video, but it has a small ~100ms delay between videos.
# If there is only one video omxplayer can also loop seamlessly.
# hello_video is a simpler player that doesn't do audio and only plays raw H264
# streams, but loops videos seamlessly if one video is played more than once.
# The image_player only displays images and for the duration configured in this file under the "image_player" section.
# The default is omxplayer.
video_player = omxplayer
#video_player = hello_video
#video_player = image_player

# File Reader Location
# Where to find media files.  Can be usb_drive, directory or usb_drive_copymode.  
# When using usb_drive any USB stick inserted in to the Pi will be automatically 
# mounted and searched for media files (only in the root directory).  
# Alternatively the directory option will search only a specified directory on the SD 
# card for media files.  
# You can change the directory to be used in the [directory] section below.  
# The default is usb_drive.
file_reader = usb_drive
#file_reader = directory
#file_reader = usb_drive_copymode

# Note on usb_drive_copymode:
# If you enable this mode, media files are copied from the USB stick to the path 
# specified in the [directory] section below.
# see additional settings for copy-mode in the [copymode] section

# On Screen Display (OSD)
# Control whether informative messages about the current player state are
# displayed, like the number of media files loaded or if it's waiting to load them.
# Default is true to display these messages, but can be set to false to disable
# them entirely.
osd = true
#osd = false

# for how many seconds should the OSD and countdown be shown after files are found
countdown_time = 5

# Below you can set a wait time (in seconds) that is waited between each video.
# wait time is not honored for the first video that plays after starting a new playlist (e.g. after plugging in usb drive)
# when using a self looping player like hello_video wait_time is not waited between each repeat of one video but between different videos
# with omxplayer wait_time will also happen between every repeat of a video
wait_time = 0

# To play files in random order set this to true
is_random = false
#is_random = true

# resume last playlist item after restart
resume_playlist = false
#resume_playlist = true

# Control the program via keyboard
# If enabled, hit the ESC key to quit the program anytime (except countdown). See the readme for more keyboard commands.
keyboard_control = true
#keyboard_control = false

# Set the background to a custom image
# This image is displayed between movies or images
# an image will be scaled to the display resolution and centered. Use i.e.
# bgimage = /home/pi/loader.png
bgimage = 

# Change the color of the background that is displayed behind videos (only works
# with omxplayer and the image_player).  Provide 3 numeric values from 0 to 255 separated by a commma
# for the red, green, and blue color value.  Default is 0, 0, 0 which is black.
bgcolor = 0, 0, 0

# Change the color of the foreground text that is displayed with the on screen
# display messages.  Provide 3 numeric values in the same format as bgcolor
# above.  Default is 255, 255, 255 or white.
fgcolor = 255, 255, 255

# Output program state to standard output if true.
# Useful for debugging to see whats going on behind the scenes
console_output = false
#console_output = true


# USB drive file reader configuration follows.
[usb_drive]

# The path to mount new USB drives.  A number will be appended to the path for
# each mounted drive (i.e. /mnt/usbdrive0, /mnt/usbdrive1, etc.).
mount_path = /mnt/usbdrive

# Whether to mount the USB drives as readonly (true) or writable (false). It is
# recommended to mount USB drives readonly for reliability.
readonly = true


# Directory file reader configuration follows.
[directory]
# The path to search for movies when using the directory file reader.
# (see the file_reader section above to enable it)
path = /home/pi/video


# Copy-mode file reader configuration follows.
[copymode]
# this setting controls what happens when a USB drive is plugged in while in copymode 
# (see the file_reader section above to enable it)
# the default setting "replace" deletes any files in the video directory and then copies the files from the USB drive
# You can decide if new files on the drive should replace existing files or get added. "Replace" means that any existing videofiles on the RPi get deleted, and only the new files remain.
# This setting can be overruled by placing a file named "replace" or "add" on the drive.
# The default mode is "replace".
# NOTE: files with the same name are always overwritten
mode = replace
#mode = add

# with this setting you can control if a file named "loader.png" should be copied from the drive to be used eg as a background
# the file is copied to /home/pi/loader.png
copyloader = false
#copyloader = true

# this setting defines a "password" that has to exist as a file (with the password as a filename) (extension does not matter)
# on the USB drive for the videolooper to accept videos from the USB drive
# default is videopi - you should consider changing it - 
# if it is empty no check will be performed
# for maximum compatibility use only ascii characters
password = videopi


[playlist]
# This setting allows for a fixed playlist. See the example.m3u file in assets for the syntax.
# Path to the playlist file.
# If you enter a relative path (not starting with /) it is considered relative to the selected file_reader path (directory or USB drive).
# Leave empty to not use a playlist and play all the files in the file_reader path (directory or USB drive).
path = 
#path = playlist.m3u





# ALSA configuration follows.
# This only applies when using omxplayer with sound = alsa.
[alsa]

# ALSA hardware device to use for sound output.  This consists of the card
# number and subdevice number separated by a comma, e.g. '1,0'.  Run 
# 'aplay -l' to list available devices.  If empty, the default output device is
# used.
hw_device = 
#hw_device = 1,0

# Volume of the hardware device can be set using a text file provided with the
# video files.  If the file does not exist, the hardware volume will remain
# unchanged.  This setting specifies the name of the text file.
# The file should contain a single line with an amixer-compatible volume value,
# such as '50%' or '-10db'.
hw_vol_file =
#hw_vol_file = alsa_volume

# Name of the ALSA control to use for adjusting volume.  Typically this will be
# 'PCM'.  Run 'amixer -c N scontrols' (where N is the card number of your output
# device) to list available controls.
hw_vol_control = PCM


# omxplayer configuration follows.
[omxplayer]

# List of supported file extensions.  Must be comma separated and should not
# include the dot at the start of the extension.
extensions = avi, mov, mkv, mp4, m4v

# Sound output for omxplayer, either hdmi, local, both or alsa.  When set to
# hdmi the video sound will be played on the HDMI output, and when set to local
# the sound will be played on the analog audio output.  A value of both will
# play sound on both HDMI and the analog output.  A value of alsa will play
# sound through ALSA, using the device specified in the [alsa] section above.
# The both value is the default.
sound = both
#sound = hdmi
#sound = local
#sound = alsa

# Specify a sound volume output for the video player. 
# The volume will be read from a file near the
# video files. If the file does not exist, a default volume of 0db will be used.
# To use this feature create a file in the same directory as the videos and name
# it the value defined below (like 'sound_volume' by default), then inside the
# file add a single line with the volume value in text to pass to omxplayer (using
# its --vol option which takes a value in millibels).
# NOTE: This may introduce audible quantization error. Using hw_vol_file will
# generally give better sound quality.
sound_vol_file = sound_volume

# Fixed playlists may embed titles, which can be shown. See playlist section above.
# If no fixed playlist is given, titles are simply filenames without extensions.
show_titles = false
#show_titles = true

# Title duration in seconds. -1 means endless.
title_duration = 10

# Any extra command line arguments to pass to omxplayer.  It is not recommended
# that you change this unless you have a specific need to do so!  The audio and
# video FIFO buffers are kept low to reduce clipping ends of movie at loop.
# Run 'omxplayer -h' to have the full list of parameters or see
# https://github.com/popcornmix/omxplayer#synopsis for all available options
extra_args = --no-osd --audio_fifo 0.01 --video_fifo 0.01 --align center --font-size 55


# hello_video player configuration follows.
[hello_video]

# List of supported file extensions.  Must be comma separated and should not
# include the dot at the start of the extension.
extensions = h264


# image player configuration follows
[image_player]

# List of supported file extensions.  Must be comma separated and should not
# include the dot at the start of the extension.
extensions = jpg, jpeg, gif, png

# Seconds an image is displayed
duration = 5

# Controls if images should be scaled to fit (shrink or enlarge) the display resolution. Default: true
scale = true
#scale = false

# Controls if images should be displayed centered. Default: true
center = true
#center = false